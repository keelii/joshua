{% extends "layout.njk" %}

{% block body %}

{% set active = 'typo' %}
{% include "nav.njk" %}

    <fieldset>
        <legend>En sans-serif</legend>

        <div class="typo">
            {{ heading(1) }}
            {{ para() }}
            {{ para() }}
            {{ heading(2) }}
            {{ para() }}
            {{ para() }}
            {{ heading(3) }}
            {{ para() }}
            {{ para() }}
            {{ heading(4) }}
            {{ para() }}
            {{ para() }}
            {{ heading(5) }}
            {{ para() }}
            {{ para() }}
            {{ heading(6) }}
            {{ para() }}
            {{ para() }}
        </div>
    </fieldset>


    <fieldset>
        <legend>中文 serif</legend>

        <div class="typo serif">
            <h1>HTTPie 官方文档中文翻译版</h1>
            <blockquote>
                <p>测试文字</p>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur cumque doloremque esse hic id magnam minus natus neque nobis perferendis possimus repellat totam, vitae. Eos facilis labore magni modi soluta.</p>
            </blockquote>
            <ul><li><p><kbd>Mod</kbd> + <kbd>N</kbd> N<footnote class="footnote"><span class="footnote-tip">N 表示2～6（h1 除外，文章标题已使用）</span></footnote> 级标题</p></li><li><p><kbd>Mod</kbd> + <kbd>0</kbd> 段落</p></li><li><p><kbd>Mod</kbd> + <kbd>b</kbd> 文字 <strong>加粗</strong></p></li><li><p><kbd>Mod</kbd> + <kbd>i</kbd> 文字 <em>斜体</em></p></li><li><p><kbd>Mod</kbd> + <kbd>l</kbd> 设置 <a href="http://keelii.com" title="Someting">链接</a></p></li><li><p><kbd>Mod</kbd> + <kbd>e</kbd> 行内 <code>代码</code> 标记</p></li><li><p><kbd>Mod</kbd> + <kbd>k</kbd> 键盘键位 <kbd>ctrl</kbd></p></li><li><p><kbd>Mod</kbd> + <kbd>_</kbd> 插入水平换行符</p></li><li><p><kbd>Mod</kbd> + <kbd>&gt;</kbd> 使用选择内容创建引用块儿（<kbd>Shift</kbd> + <kbd>.</kbd>）</p></li><li><p><kbd>Mod</kbd> + <kbd>\</kbd> 使用选择内容创建代码块儿</p></li><li><p><kbd>Shift</kbd> + <kbd>Ctrl</kbd> + <kbd>8</kbd> 使用选择内容无序列表</p></li><li><p><kbd>Shift</kbd> + <kbd>Ctrl</kbd> + <kbd>9</kbd> 使用选择内容有序列表</p></li><li><p><kbd>Mod</kbd> + <kbd>Enter</kbd> 跳出引用块儿</p></li><li><p><kbd>Mod</kbd> + <kbd>[</kbd> 减少列表层级</p></li><li><p><kbd>Mod</kbd> + <kbd>]</kbd> 增加列表层级</p></li></ul>
            <p>HTTPie 是一个命令行 HTTP 客户端。目标是让 CLI 与 Web services 的交互尽可能的更友 好。它提供了一个简单的 <code>http</code> 命令，可以让我们用简单自然的表述发送任意 HTTP 请求 ，并且可以输出带代码高亮的结果。HTTPie 可以使用在测试、调试以及通用的与 HTTP 交 互场景</p><h2 id="h2-主要功能特性" class="heading">主要功能特性</h2><ul><li><p>自然而且简单的命令语句</p></li><li><p>格式化且高亮显示输出内容</p></li><li><p>内置 JSON 支持</p></li><li><p>表单和文件上传</p></li><li><p>支持 HTTPS, 代理和授权验证</p></li><li><p>支持多样化的请求数据格式</p></li><li><p>自定义 headers 头</p></li><li><p>持久 sessions 存储</p></li><li><p>类似 <code>wget</code> 的下载模式</p></li><li><p>兼容 Python 2.6, 2.7 以及 3.x</p></li><li><p>支持 Linux, macOS 和 Windows 操作系统</p></li><li><p>插件支持</p></li><li><p>详细的文档说明</p></li><li><p>完善的测试用例覆盖</p></li></ul><h2 id="h2-安装" class="heading">安装</h2><h3 id="h3-macOS" class="heading">macOS</h3><p>在 macOS 系统中推荐使用 <a data-href="brew.sh">Homebrew</a> 来安装:</p><pre><code>brew install httpie</code></pre><p>当然 MacPorts 也是可以的:</p><pre><code>port install httpie</code></pre><h3 id="h3-Linux" class="heading">Linux</h3><p>大多数的 Linux 构建版都提供了包管理组件，可以使用他们来安装：</p><pre><code># 基于 Debian Linux 的构建版，比如 Ubuntu
apt-get install httpie

# 基于 RPM Linux 的构建版
yum install httpie

# Arch Linux 系统
pacman -S httpie</code></pre><h3 id="h3-Windows-及其它" class="heading">Windows 及其它</h3><p>使用 <a data-href="https://pip.pypa.io/en/latest/installing/">pip</a> 是一种通用的（可以使用在 Windows, MacOS, Linux ...）并且提供最新版本安装包的安装方法</p><pre><code># 确保使用了最新版本的 pip 和 setuptools:
pip install --upgrade pip setuptools

pip install --upgrade httpie</code></pre><h3 id="h3-开发版" class="heading">开发版</h3><p>最新的开发版本可以直接通过 github 安装</p><pre><code># Homebrew
brew install httpie --HEAD

# pip
pip install --upgrade https://github.com/jkbrzt/httpie/archive/master.tar.gz</code></pre><h3 id="h3-Python-版本" class="heading">Python 版本</h3><p>虽然兼容 Python 2.6, 2.7 版本的，但是如果可以的话还是建议使用最新版的 Python 3.x 来安装 HTTPie。这将保证一些比较新的功能（比如：[SNI](#服务器名称指示 -sni-server-name-indication) ）可以开箱即用。Python 3 在 Homebrew 0.9.4 版本以上 已经成为了默认的 Python 版本。可以使用 <code>http --debug</code> 来查看 HTTPie 使用的 python 版本</p><h2 id="h2-使用" class="heading">使用</h2><p>最简单的使用：</p><pre><code>http httpie.org</code></pre><p>使用语法：</p><pre><code>http [flags] [METHOD] URL [ITEM [ITEM]]</code></pre><p>也可以使用 <code>http --help</code> 来查看更多使用方法：</p><h3 id="h3-例子" class="heading">例子</h3><p>自定义 HTTP 方法，HTTP 头和 JSON 数据：</p><pre><code>http PUT example.org X-API-Token:123 name=John</code></pre><p>表单提交：</p><pre><code>http -f POST example.org hello=World</code></pre><p>使用一个输出参数 <code>-v</code> 来查看请求信息（默认不显示请求信息）：</p><pre><code>http -v example.org</code></pre><p>使用 <a data-href="http://developer.github.com/v3/issues/comments/#create-a-comment">Github API</a> 向 issue 发送一条评论（需要授权验证参数）：</p><pre><code>http -a USERNAME POST https://api.github.com/repos/jkbrzt/httpie/issues/83/comments body='HTTPie is awesome! :heart:'</code></pre><p>通过命令行的输入重定向上传文件：</p><pre><code>http example.org &lt; file.json</code></pre><p>使用 <code>wget</code> 风格下载文件：</p><pre><code>http --download example.org/file</code></pre><p>使用命令会话对同一 host 进行请求之间的持久通信：</p><pre><code>http --session=logged-in -a username:password httpbin.org/get API-Key:123
http --session=logged-in httpbin.org/headers</code></pre><p>自定义请求 host 头：</p><pre><code>http localhost:8000 Host:example.com</code></pre><h2 id="h2-HTTP-方法" class="heading">HTTP 方法</h2><p>HTTP 方法的名称在 URL 参数之前：</p><pre><code>http DELETE example.org/todos/7</code></pre><p>这看起来就像是原生的 HTTP 请求发送的文本一样：</p><pre><code>DELETE /todos/7 HTTP/1.1</code></pre><h2 id="h2-请求-URL" class="heading">请求 URL</h2><p>HTTPie 唯一必传的一个参数是请求 URL，默认的方案不出意料的是 <code>http://</code>，可以在请 求的时候缺省 - <code>http example.org</code> 是没问题的</p><h3 id="h3-Querystring-参数" class="heading">Querystring 参数</h3><p>如果需要在命令行手动构建 URLs，你可能会觉得使用 <code>param==value</code> 添加参数的方式是 比较方便的，这样你就不需要担心命令行中转义链接字符串 <code>&amp;</code> 的问题，当然参数中的特 殊字符也将被自动转义（除非已经转义过）。用下面的命令搜索 <code>HTTPie logo</code> 可以在 google 图片上结果：</p><pre><code>http www.google.com search=='HTTPie logo' tbm==isch

GET /?search=HTTPie+logo&amp;tbm=isch HTTP/1.1</code></pre><h3 id="h3-localhost-的-URL-缩写" class="heading">localhost 的 URL 缩写</h3><p>另外，类似 <code>curl</code> 的 localhost 缩写也是支持的。这表示你可以使用 <code>:3000</code> 来代替 <code>http://localhost:3000</code>, 如果不传入端口号，<code>80</code> 将会默认被使用</p><pre><code>http :/foo

GET /foo HTTP/1.1
Host: localhost</code></pre><pre><code>http :3000/bar

GET /bar HTTP/1.1
Host: localhost:3000</code></pre><pre><code>http :

GET / HTTP/1.1
Host: localhost</code></pre><h3 id="h3-自定义默认的方案" class="heading">自定义默认的方案</h3><p>你可以使用 <code>--default-scheme &lt;URL_SCHEME&gt;</code> 参数来指定非 HTTP 的其它协义</p><pre><code>alias https='http --default-scheme=https'</code></pre><h2 id="h2-请求项" class="heading">请求项</h2><p>不同的请求项类型提供一种便捷的方法来指定 HTTP 头、简单的 JSON 、表单数据、文件、URL 参数</p><p>URL 参数后面紧随的是 <code>键/值</code> 对参数都会被拼装成请求发送。不同类型的 <code>键/值</code> 对分 割符号分别是：<code>:</code>, <code>=</code>, <code>:=</code>, <code>@</code>, <code>=@</code>, <code>:=@</code>。用 <code>@</code> 分割的参数表示文件路径</p><table><tbody><tr><th>项类型(item type)</th><th>描述(Description)</th></tr><tr><td>HTTP 头参数<br><code>Name:Value</code></td><td>任意的 HTTP 头，比如：<code>X-API-Token:123</code></td></tr><tr><td>URL 参数<br><code>name==value</code></td><td>通过分割符 <code>==</code> 表示一个查询字符串的 <code>键/值</code> 对</td></tr><tr><td>数据域<br><code>field=value</code>,<br><code>field=@file.txt</code></td><td>请求一个默认会被序列化成 JSON 的数据域，或者表单类型 form-encoded<code>(--form, -f)</code></td></tr><tr><td>纯 JSON 域<br><code>field:=json</code>,<br><code>field:=@file.json</code></td><td>当需要指定一个或者多数域参数类型 <code>boolean</code>, <code>number</code> .. 时非常有用， 比如：meals:='["ham","spam"]' or pies:=[1,2,3] (注意引号).</td></tr><tr><td>Form 表单文件域</td><td>仅当传入参数 <code>--form, -f</code> 时有效，比如 <code>screenshot@~/Pictures/img.png</code> 文件内容将会被序列化成 <code>multipart/form-data</code> 发送</td></tr></tbody></table><p>数据域不是唯一的指定请求数据的方式，<a data-href="#%E9%87%8D%E5%AE%9A%E5%90%91%E8%BE%93%E5%85%A5">重定向输入</a>也可以</p><p>…</p>
        </div>
    </fieldset>

{% endblock body %}
